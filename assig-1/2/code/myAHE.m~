%% Adaptive Histogram Equalization
   %Input Parameters: Input Image
   %                  Window Size, N
   %Output Parameters: Output Image
%%
function [] = myAHE()

[inputImage, map] =imread('../data/ca');
[row, col, d] = size(inputImage);

window_x = 61;
window_y = 61;

hand = @(x) calcAHEVal(x)

if d==1
   outputImage = nlfilter(inputImage,[window_x window_y],hand);
else
   inputImageR = inputImage(:,:,1); 
   inputImageG = inputImage(:,:,2);
   inputImageB = inputImage(:,:,3);
   
   outputImageR = zeros(row, col);
   outputImageG = zeros(row, col);
   outputImageB = zeros(row, col);
   
   outputImageR = nlfilter(inputImageR,[window_x window_y],hand);
   outputImageG = nlfilter(inputImageG,[window_x window_y],hand);
   outputImageB = nlfilter(inputImageB,[window_x window_y],hand);

% for i=1:row
%     for j=1:col
%         for k=1:d
%             % // min_x = max(1,i-window_x);
%             % // min_y = max(1,j-window_y);
%             % // max_x = min(row,i+window_x);
%             % // max_y = min(col,j+window_y);
%             % // window_matrix = inputImage(min_x:max_x,min_y:max_y,k);

%             if inputImage(i,j,k) == 0
%                 outputImage(i,j,k) =0;
%             else
%             [histogramEquMatrix, transformationFunction ] = myHE(window_matrix);
%             % disp(transformationFunction);
%             outputImage(i,j,k) = transformationFunction(inputImage(i,j,k));
%             end
%         end
%     end
outputImage = uint8(cat(3,outputImageR,outputImageG,outputImageB));
end

imshow(outputImage);

end

function AHEVal = calcAHEVal(inpMat)
   H=imhist(inpMat);
   [N, M] = size(inpMat);
   H=H/(N*M);
   C = double(zeros(1,255));
   C(1) = H(1)*255;

   for (k=2:256)
       C(k)= C(k-1) + (H(k)*255);
   end
   AHEVal = uint8(C(inpMat(floor((1+N)/2)+1,floor((1+M)/2))+1));
end